{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"automatyzacja_io_demo Documentation : https://piotrgredowski.github.io/automatyzacja_io_demo Source Code : https://github.com/piotrgredowski/automatyzacja_io_demo This is just a demo service for automatyzacja.io conference. Development Clone this repository Requirements: Poetry 1.2.1 Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell Testing poetry run pytest Documentation The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically. Pre-commit Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files","title":"Introduction"},{"location":"#automatyzacja_io_demo","text":"Documentation : https://piotrgredowski.github.io/automatyzacja_io_demo Source Code : https://github.com/piotrgredowski/automatyzacja_io_demo This is just a demo service for automatyzacja.io conference.","title":"automatyzacja_io_demo"},{"location":"#development","text":"Clone this repository Requirements: Poetry 1.2.1 Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell","title":"Development"},{"location":"#testing","text":"poetry run pytest","title":"Testing"},{"location":"#documentation","text":"The documentation is automatically generated from the content of the docs directory and from the docstrings of the public signatures of the source code. The documentation is updated and published as a Github project page automatically.","title":"Documentation"},{"location":"#pre-commit","text":"Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files","title":"Pre-commit"},{"location":"api_docs/","text":"API documentation get_current_presentation () -> Presentation async Returns ongoing presentation at automatyzacja.io. Raises: Type Description HTTPException When there's no ongoing presentation_ Returns: Type Description Presentation Presentation Source code in src/main.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 @app . get ( \"/current\" , response_class = CustomReponse ) async def get_current_presentation () -> Presentation : \"\"\"Returns ongoing presentation at automatyzacja.io. Raises: HTTPException: When there's no ongoing presentation_ Returns: Presentation \"\"\" presentations = get_presentations () now = datetime . datetime . now () . time () try : current = [ r for r in presentations if r . time_from <= now < r . time_to ][ 0 ] except IndexError : raise HTTPException ( status_code = 404 , detail = \"There's no ongoing presentation\" ) return current get_next_presentation () -> Presentation async Returns next presentation which will happen on automatyzacja.io Raises: Type Description HTTPException When there's no next presentation Returns: Type Description Presentation Presentation Source code in src/main.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @app . get ( \"/next\" , response_class = CustomReponse ) async def get_next_presentation () -> Presentation : \"\"\"Returns next presentation which will happen on automatyzacja.io Raises: HTTPException: When there's no next presentation Returns: Presentation \"\"\" presentations = get_presentations () try : current = await get_current_presentation () except HTTPException : return presentations [ 0 ] next_idx = presentations . index ( current ) + 1 if next_idx >= len ( presentations ): raise HTTPException ( status_code = 404 , detail = \"Current presentation is last one!\" ) return presentations [ next_idx ] get_presentations () -> List [ Presentation ] Parses agenda.json file and returns list of more readable data objects. Source code in src/main.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def get_presentations () -> List [ Presentation ]: \"Parses agenda.json file and returns list of more readable data objects.\" agenda = json . loads ( open ( os . path . join ( os . path . dirname ( __file__ ), \"agenda.json\" )) . read () ) records = agenda [ \"records\" ] results = [] for record_ in records : record = record_ [ \"fields\" ] presenter = record [ \"Prelegent\" ] company = record . get ( \"Firma\" ) _hour = record [ \"Godzina\" ] . replace ( \".\" , \":\" ) _time_from , _time_to = _hour . split ( \"-\" ) hour_from , minute_from = ( int ( p ) for p in _time_from . split ( \":\" )) hour_to , minute_to = ( int ( p ) for p in _time_to . split ( \":\" )) time_from = datetime . time ( hour = hour_from , minute = minute_from ) time_to = datetime . time ( hour = hour_to , minute = minute_to ) title = record [ \"Proponowany tytu\u0142 prezentacji\" ] description = record . get ( \"Kr\u00f3tki opis prezentacji\" ) results . append ( Presentation ( presenter = presenter , company = company , time_from = time_from , time_to = time_to , title = title , description = description , ) ) return results get_random_presentation () -> Presentation async Returns random presentation at automatyzacja.io. Returns: Type Description Presentation Presentation Source code in src/main.py 69 70 71 72 73 74 75 76 77 78 @app . get ( \"/random\" , response_class = CustomReponse ) async def get_random_presentation () -> Presentation : \"\"\"Returns random presentation at automatyzacja.io. Returns: Presentation \"\"\" presentations = get_presentations () return random . choice ( presentations )","title":"API documentation"},{"location":"api_docs/#api-documentation","text":"","title":"API documentation"},{"location":"api_docs/#src.main.get_current_presentation","text":"Returns ongoing presentation at automatyzacja.io. Raises: Type Description HTTPException When there's no ongoing presentation_ Returns: Type Description Presentation Presentation Source code in src/main.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 @app . get ( \"/current\" , response_class = CustomReponse ) async def get_current_presentation () -> Presentation : \"\"\"Returns ongoing presentation at automatyzacja.io. Raises: HTTPException: When there's no ongoing presentation_ Returns: Presentation \"\"\" presentations = get_presentations () now = datetime . datetime . now () . time () try : current = [ r for r in presentations if r . time_from <= now < r . time_to ][ 0 ] except IndexError : raise HTTPException ( status_code = 404 , detail = \"There's no ongoing presentation\" ) return current","title":"get_current_presentation()"},{"location":"api_docs/#src.main.get_next_presentation","text":"Returns next presentation which will happen on automatyzacja.io Raises: Type Description HTTPException When there's no next presentation Returns: Type Description Presentation Presentation Source code in src/main.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @app . get ( \"/next\" , response_class = CustomReponse ) async def get_next_presentation () -> Presentation : \"\"\"Returns next presentation which will happen on automatyzacja.io Raises: HTTPException: When there's no next presentation Returns: Presentation \"\"\" presentations = get_presentations () try : current = await get_current_presentation () except HTTPException : return presentations [ 0 ] next_idx = presentations . index ( current ) + 1 if next_idx >= len ( presentations ): raise HTTPException ( status_code = 404 , detail = \"Current presentation is last one!\" ) return presentations [ next_idx ]","title":"get_next_presentation()"},{"location":"api_docs/#src.main.get_presentations","text":"Parses agenda.json file and returns list of more readable data objects. Source code in src/main.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def get_presentations () -> List [ Presentation ]: \"Parses agenda.json file and returns list of more readable data objects.\" agenda = json . loads ( open ( os . path . join ( os . path . dirname ( __file__ ), \"agenda.json\" )) . read () ) records = agenda [ \"records\" ] results = [] for record_ in records : record = record_ [ \"fields\" ] presenter = record [ \"Prelegent\" ] company = record . get ( \"Firma\" ) _hour = record [ \"Godzina\" ] . replace ( \".\" , \":\" ) _time_from , _time_to = _hour . split ( \"-\" ) hour_from , minute_from = ( int ( p ) for p in _time_from . split ( \":\" )) hour_to , minute_to = ( int ( p ) for p in _time_to . split ( \":\" )) time_from = datetime . time ( hour = hour_from , minute = minute_from ) time_to = datetime . time ( hour = hour_to , minute = minute_to ) title = record [ \"Proponowany tytu\u0142 prezentacji\" ] description = record . get ( \"Kr\u00f3tki opis prezentacji\" ) results . append ( Presentation ( presenter = presenter , company = company , time_from = time_from , time_to = time_to , title = title , description = description , ) ) return results","title":"get_presentations()"},{"location":"api_docs/#src.main.get_random_presentation","text":"Returns random presentation at automatyzacja.io. Returns: Type Description Presentation Presentation Source code in src/main.py 69 70 71 72 73 74 75 76 77 78 @app . get ( \"/random\" , response_class = CustomReponse ) async def get_random_presentation () -> Presentation : \"\"\"Returns random presentation at automatyzacja.io. Returns: Presentation \"\"\" presentations = get_presentations () return random . choice ( presentations )","title":"get_random_presentation()"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"}]}